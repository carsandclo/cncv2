// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: c4FCQiVEmUqfPef3MjSmg8
// Component: LYvWchZIK2Ry

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: c4FCQiVEmUqfPef3MjSmg8/projectcss
import sty from "./PlasmicSizeChartHoodie.module.css"; // plasmic-import: LYvWchZIK2Ry/css

createPlasmicElementProxy;

export type PlasmicSizeChartHoodie__VariantMembers = {};
export type PlasmicSizeChartHoodie__VariantsArgs = {};
type VariantPropType = keyof PlasmicSizeChartHoodie__VariantsArgs;
export const PlasmicSizeChartHoodie__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSizeChartHoodie__ArgsType = {};
type ArgPropType = keyof PlasmicSizeChartHoodie__ArgsType;
export const PlasmicSizeChartHoodie__ArgProps = new Array<ArgPropType>();

export type PlasmicSizeChartHoodie__OverridesType = {
  root?: Flex__<"div">;
};

export interface DefaultSizeChartHoodieProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSizeChartHoodie__RenderFunc(props: {
  variants: PlasmicSizeChartHoodie__VariantsArgs;
  args: PlasmicSizeChartHoodie__ArgsType;
  overrides: PlasmicSizeChartHoodie__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__rL92S
        )}
        id={"lblname"}
      >
        {"Hoodie Size Chart"}
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__jLwMy)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__clbnD
          )}
          id={"lblsize"}
        >
          {"Size"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ve8Mv
          )}
          id={"lblsize"}
        >
          {"Height"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__kKkG1
          )}
          id={"lblsize"}
        >
          {"Width"}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox___7EAsl)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__q1WeQ
          )}
          id={"lblsize"}
        >
          {"S"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__vyoLd
          )}
          id={"lblsize"}
        >
          {"65"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__sHmvV
          )}
          id={"lblsize"}
        >
          {"52"}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__zjUiu)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ob5G9
          )}
          id={"lblsize"}
        >
          {"M"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__piJ0
          )}
          id={"lblsize"}
        >
          {"67"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__mRf6
          )}
          id={"lblsize"}
        >
          {"53"}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__vtNq7)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___7JQBm
          )}
          id={"lblsize"}
        >
          {"L"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__lfHaJ
          )}
          id={"lblsize"}
        >
          {"70"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___9Fld
          )}
          id={"lblsize"}
        >
          {"56"}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__deimP)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__el2Ok
          )}
          id={"lblsize"}
        >
          {"XL"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__vouvU
          )}
          id={"lblsize"}
        >
          {"73"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__qp9NE
          )}
          id={"lblsize"}
        >
          {"61"}
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__y78A)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ejF3
          )}
          id={"lblsize"}
        >
          {"XXL"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ni7Pv
          )}
          id={"lblsize"}
        >
          {"76"}
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ttj9R
          )}
          id={"lblsize"}
        >
          {"64"}
        </div>
      </div>
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__ezlcY
        )}
        id={"lblname"}
      >
        {"*Measurement in centimeters"}
      </div>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSizeChartHoodie__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSizeChartHoodie__VariantsArgs;
    args?: PlasmicSizeChartHoodie__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSizeChartHoodie__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSizeChartHoodie__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSizeChartHoodie__ArgProps,
          internalVariantPropNames: PlasmicSizeChartHoodie__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSizeChartHoodie__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSizeChartHoodie";
  } else {
    func.displayName = `PlasmicSizeChartHoodie.${nodeName}`;
  }
  return func;
}

export const PlasmicSizeChartHoodie = Object.assign(
  // Top-level PlasmicSizeChartHoodie renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSizeChartHoodie
    internalVariantProps: PlasmicSizeChartHoodie__VariantProps,
    internalArgProps: PlasmicSizeChartHoodie__ArgProps
  }
);

export default PlasmicSizeChartHoodie;
/* prettier-ignore-end */
